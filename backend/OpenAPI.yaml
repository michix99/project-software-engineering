---
openapi: 3.0.1  
info:
  title: Prototype Correction Management System
  description: "An OpenAPI for 'projekt-software-engineering'." 
  version: 1.0.0
servers:
- url: https://europe-west3-projekt-software-engineering.cloudfunctions.net/project-software-engineering-rest
paths:
  /data/course:
    get:
      tags:
          - Course
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/course_response_body'
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
    post:
      tags:
          - Course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/course_request_body'
            examples:
              example:
                value: "{\r\n\"course_abbreviation\": \"IMT101\",\r\n\"name\": \"Grundlagen Mathematik I\"\r\n}"
      responses:
        "201":
          description: Course was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /data/course/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the course to modify
      tags:
          - Course
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course_response_body'
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "404":
          description: Course was not found.
        "500":
          description: An internal server error happened.
    put:
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the course to modify
      tags:
          - Course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/course_request_body'
            examples:
              example:
                value: "{\r\n\"course_abbreviation\": \"IMT101\",\r\n\"name\": \"Grundlagen Mathematik I --> Update\"\r\n}"
      responses:
        "200":
          description: Course was successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "404":
          description: Course was not found.
        "500":
          description: An internal server error happened.
    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the course to modify
      tags:
          - Course
      responses:
        "204":
          description: Successfully deleted course.
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "404":
          description: Course was not found.
        "500":
          description: An internal server error happened.
  /data/ticket:
    get:
      tags:
        - Ticket
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ticket_response_body'
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
    post:
      tags:
          - Ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ticket_request_body'
            examples:
              example:
                value: "{\r\"id\": \"dummy-id\",\r\"description\": \"My Description\",\r\"courseId\": \"course-id\",\r\"title\": \"My title\",\r\"status\": \"OPEN\",\r\"priority\": \"UNDEFINED\",\r\"assigneeId\": \"assignee-id\",\r\"type\": \"ERROR\"\r}"
      responses:
        "201":
          description: Ticket was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /data/ticket/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the ticket to modify
      tags:
          - Ticket
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket_response_body'
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "404":
          description: Ticket was not found.
        "500":
          description: An internal server error happened.
    put:
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the ticket to modify
      tags:
          - Ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ticket_request_body'
            examples:
              example:
                value: "{\r\"id\": \"dummy-id\",\r\"description\": \"My Description --> new\",\r\"courseId\": \"course-id\",\r\"title\": \"My title\",\r\"status\": \"OPEN\",\r\"priority\": \"UNDEFINED\",\r\"assigneeId\": \"assignee-id\",\r\"type\": \"ERROR\"\r}"
      responses:
        "200":
          description: Ticket was successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "404":
          description: Ticket was not found.
        "500":
          description: An internal server error happened.
  /data/comment?ticket_id={ticket_id}:
    get:
      parameters:
        - in: query
          name: ticket_id
          schema:
            type: string
            format: uuid
          description: The ticket to load the comments for.
      tags:
        - Comment
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment_response_body'
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /data/comment:
    post:
      tags:
          - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment_request_body'
            examples:
              example:
                value: "{\r\n\"content\": \"Very cool comment\",\r\n\"ticket_id\": \"9da04d8f-7f7a-42e7-bf66-b00f2115a7db\"\r\n}"
      responses:
        "201":
          description: Comment was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /data/ticket_history?ticket_id={ticket_id}:
    get:
      parameters:
        - in: query
          name: ticket_id
          schema:
            type: string
            format: uuid
          description: The ticket to load the history for.
      tags:
        - Ticket History
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ticket_history_response_body'
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /api/user:
    get:
      tags:
        - User
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user_response_body'
        "400":
          description: Invalid parameters.
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /api/user/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the user to load
      tags:
        - User
      responses:
        "200":
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_response_body'
        "400":
          description: Invalid parameters.
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /api/setRole:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role_request_body'
            examples:
              example:
                value: "{\r\n\"role\": \"editor\",\r\n\"target_user_id\": \"9da04d8f-7f7a-42e7-bf66-b00f2115a7db\"\r\n}"
      tags:
        - User
      responses:
        "200":
          description: Role successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "400":
          description: Invalid parameters.
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.
  /api/updateUser:
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_request_body'
            examples:
              example:
                value: "{\r\n\"display_name\": \"Dummy User\",\r\n\"email\": \"test@email.de\",\r\n\"target_user_id\": \"9da04d8f-7f7a-42e7-bf66-b00f2115a7db\"\r\n}"
      responses:
        "200":
          description: User was successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "400":
          description: Invalid parameters.
        "401":
          description: Request was unauthorized.
        "403":
          description: Token validation failed or user does not have required permissions.
        "500":
          description: An internal server error happened.

components:
  schemas:
    metadata:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        created_by:
          type: string
        modified_at:
          type: string
          format: date-time
        modified_by:
          type: string
    ticket_request_body:
      required:
      - description
      - course_id
      - title
      - status
      - priority
      - assignee_id
      - type
      type: object
      properties:
        description:
          type: string
        course_id:
          type: string
          format: uuid
        title:
          type: string
        assignee_id:
          type: string
          format: uuid
        status:
          type: string
        priority:
          type: string
        type:
          type: string
      additionalProperties: false
    ticket_response_body:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
            description:
              type: string
            course_id:
              type: string
              format: uuid
            course_abbreviation:
              type: string
            course_name:
              type: string
            title:
              type: string
            assignee_id:
              type: string
              format: uuid
            assignee_name:
              type: string
            status:
              type: string
            priority:
              type: string
            type:
              type: string
        - $ref: '#/components/schemas/metadata'
      additionalProperties: false
    course_request_body:
      required:
      - course_abbreviation
      - name
      type: object
      properties:
        course_abbreviation:
          type: string
        name:
          type: string
      additionalProperties: false
    course_response_body:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
            course_abbreviation:
              type: string
            name:
              type: string
        - $ref: '#/components/schemas/metadata'
    comment_request_body:
      required:
      - content
      - ticket_id
      type: object
      properties:
        content:
          type: string
        ticket_id:
          type: string
          format: uuid
      additionalProperties: false
    comment_response_body:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
            content:
              type: string
            ticket_id:
              type: string
              format: uuid
        - $ref: '#/components/schemas/metadata'
    ticket_history_response_body:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
            previous_values:
              type: object
            changed_values:
              type: object
            ticket_id:
              type: string
              format: uuid
        - $ref: '#/components/schemas/metadata'
    user_response_body:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        display_name:
          type: string
        disabled:
          type: boolean
        admin:
          type: boolean
        editor:
          type: boolean
        requester:
          type: boolean
    role_request_body:
      required:
      - target_user_id
      - role
      type: object
      properties:
        target_user_id:
          type: string
          format: uuid
        role:
          type: string
      additionalProperties: false
    user_request_body:
      required:
      - target_user_id
      - display_name
      - email
      type: object
      properties:
        target_user_id:
          type: string
          format: uuid
        display_name:
          type: string
        email:
          type: string
          format: email
      additionalProperties: false
  securitySchemes:
    bearerAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: [] 
